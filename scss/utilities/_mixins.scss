//BEM

@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}


//Grid maker

@mixin g-columns {
  @for $i from 2 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;  
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    
    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}  



//Colors
@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme}.theme__colors {
			background-color: $color;
		}
	}
}

//Flex

@mixin flex ($display: flex, $dir: null, $wrap: null, $just: null){
    display: $display;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $just;
    @content;
}

@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}

//MQ

@mixin mq($break) {
	@if $break == "small" {
		@media (min-width: $breakpnt-sm) and (max-width: $breakpnt-md) {
			@content;
		}
	}
	@else if $break == "medium" {
		@media (min-width: $breakpnt-md + 1){
			@content;
		}
	}
	@else if $break == "large" {
		@media (min-width: $breakpnt-lg + 1){
			@content;
		}
	}
	@else {
		@error "Make sure to use small, medium, or large for the '#{$break}'"
	}
}


// Flex

@mixin flexbox($disp: flex, $dir: null, $wrap: null, $just: null){
	display: $disp;
	flex-direction: $dir;
	flex-wrap: $wrap;
	justify-content: $just;
		@content;
}

